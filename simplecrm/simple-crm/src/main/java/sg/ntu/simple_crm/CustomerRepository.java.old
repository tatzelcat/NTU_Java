package sg.ntu.simple_crm;

import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public class CustomerRepository {

    private Map<Long, Customer> customers = new HashMap<>();
    private Long nextId = 1L; // To simulate auto-generated IDs

    // Preload data here now
    public CustomerRepository() {
        customers.put(1L, new Customer(1L, "John", "Doe", "john.doe@email.com", "+65 9123 4567", "Software Engineer", 1990));
        customers.put(2L, new Customer(2L, "Jane", "Smith", "jane.smith@email.com", "+65 9234 5678", "Product Manager", 1985));
        customers.put(3L, new Customer(3L, "Mike", "Johnson", "mike.johnson@email.com", "+65 9345 6789", "Data Analyst", 1992));
        nextId = 4L; // Set next available ID
    }

    // Create
    public Customer createCustomer(Customer customer) {
        customer.setId(nextId++); // Simulate auto-generated ID
        customers.put(customer.getId(), customer);
        return customer;
    }

    // Get One
    public Customer getCustomer(Long customerId) {
        return customers.get(customerId);
    }

    // Get All
    public Map<Long, Customer> getAllCustomers() {
        return new HashMap<>(customers);
    }

    // Update
    public Customer updateCustomer(Long customerId, Customer customer) {
        Customer customerToUpdate = customers.get(customerId);
        if (customerToUpdate != null) {
            customerToUpdate.setFirstName(customer.getFirstName());
            customerToUpdate.setLastName(customer.getLastName());
            customerToUpdate.setEmail(customer.getEmail());
            customerToUpdate.setContactNo(customer.getContactNo());
            customerToUpdate.setJobTitle(customer.getJobTitle());
            customerToUpdate.setYearOfBirth(customer.getYearOfBirth());
        }
        return customerToUpdate;
    }

    // Delete
    public Customer deleteCustomer(Long customerId) {
        return customers.remove(customerId);
    }

    // Check if customer exists
    public boolean customerExists(Long customerId) {
        return customers.containsKey(customerId);
    }
}